#!/usr/bin/env python3
"""
Script de d√©monstration pour les captures du Jour 4.
"""

import os
import sys
import time
import requests
import json
from datetime import datetime

def demo_health_checks():
    """D√©monstration des health checks."""
    print("üîç D√âMONSTRATION - HEALTH CHECKS")
    print("=" * 50)
    
    base_url = "http://localhost:8000"
    
    # Health live
    print("\n1. Health Check Live:")
    print("   URL: GET /health/live/")
    try:
        response = requests.get(f"{base_url}/health/live/")
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"   Erreur: {e}")
    
    # Health ready
    print("\n2. Health Check Ready:")
    print("   URL: GET /health/ready/")
    try:
        response = requests.get(f"{base_url}/health/ready/")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Service: {data.get('service')}")
        print(f"   Status: {data.get('status')}")
        print(f"   Checks: {data.get('checks')}")
    except Exception as e:
        print(f"   Erreur: {e}")
    
    # Health detailed
    print("\n3. Health Check Detailed:")
    print("   URL: GET /health/detailed/")
    try:
        response = requests.get(f"{base_url}/health/detailed/")
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Metrics: {list(data.get('metrics', {}).keys())}")
    except Exception as e:
        print(f"   Erreur: {e}")

def demo_celery_status():
    """D√©monstration du statut Celery."""
    print("\nüîß D√âMONSTRATION - CELERY STATUS")
    print("=" * 50)
    
    print("\nCommandes √† ex√©cuter dans le terminal:")
    print("1. docker-compose -f docker-compose.prod.yaml exec worker celery -A smartmarket inspect ping")
    print("2. docker-compose -f docker-compose.prod.yaml exec worker celery -A smartmarket inspect active")
    print("3. docker-compose -f docker-compose.prod.yaml exec beat celery -A smartmarket inspect scheduled")
    print("4. docker-compose -f docker-compose.prod.yaml exec worker celery -A smartmarket inspect stats")

def demo_websocket_notifications():
    """D√©monstration des notifications WebSocket."""
    print("\nüåê D√âMONSTRATION - WEBSOCKET NOTIFICATIONS")
    print("=" * 50)
    
    print("\nPour tester les notifications temps r√©el:")
    print("1. Ouvrir http://localhost:8000/admin/dashboard/ dans un navigateur")
    print("2. Se connecter avec un compte admin")
    print("3. Dans un autre onglet, cr√©er une commande")
    print("4. Observer la notification en temps r√©el dans le tableau de bord")
    
    print("\nURLs WebSocket disponibles:")
    print("- ws://localhost:8000/ws/admin/orders/")
    print("- ws://localhost:8000/ws/admin/notifications/")
    print("- ws://localhost:8000/ws/user/{user_id}/notifications/")

def demo_backup_restore():
    """D√©monstration des sauvegardes."""
    print("\nüíæ D√âMONSTRATION - SAUVEGARDES")
    print("=" * 50)
    
    print("\nCommandes de sauvegarde:")
    print("1. Sauvegarde manuelle:")
    print("   ./scripts/backup.sh")
    print("2. Sauvegarde avec nom personnalis√©:")
    print("   ./scripts/backup.sh backup_demo")
    print("3. Lister les sauvegardes:")
    print("   ls -la /opt/smartmarket/backups/")
    
    print("\nCommandes de restauration:")
    print("1. Restaurer une sauvegarde:")
    print("   ./scripts/restore.sh backup_demo")
    print("2. V√©rifier la restauration:")
    print("   curl http://localhost/health/ready/")

def demo_docker_services():
    """D√©monstration des services Docker."""
    print("\nüê≥ D√âMONSTRATION - SERVICES DOCKER")
    print("=" * 50)
    
    print("\nCommandes utiles:")
    print("1. Statut des services:")
    print("   docker-compose -f docker-compose.prod.yaml ps")
    print("2. Logs en temps r√©el:")
    print("   docker-compose -f docker-compose.prod.yaml logs -f")
    print("3. Logs d'un service sp√©cifique:")
    print("   docker-compose -f docker-compose.prod.yaml logs -f web")
    print("4. Red√©marrer un service:")
    print("   docker-compose -f docker-compose.prod.yaml restart web")
    print("5. Utilisation des ressources:")
    print("   docker stats")

def demo_ci_cd():
    """D√©monstration du pipeline CI/CD."""
    print("\nüöÄ D√âMONSTRATION - PIPELINE CI/CD")
    print("=" * 50)
    
    print("\nLe pipeline CI/CD est configur√© dans .github/workflows/ci-cd.yml")
    print("\n√âtapes du pipeline:")
    print("1. Qualit√© du code (lint, format, tests)")
    print("2. Build des images Docker")
    print("3. Scan de vuln√©rabilit√©s (Trivy)")
    print("4. Push vers le registre")
    print("5. D√©ploiement automatique")
    print("6. Tests de r√©gression")
    print("7. Notifications")
    
    print("\nPour d√©clencher le pipeline:")
    print("1. Faire un push sur la branche main")
    print("2. Cr√©er une pull request")
    print("3. V√©rifier les actions dans GitHub Actions")

def main():
    """Fonction principale de d√©monstration."""
    print("üé¨ D√âMONSTRATION JOUR 4 - SMARTMARKET")
    print("=" * 60)
    print(f"üïê D√©but: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # D√©monstrations
    demo_health_checks()
    demo_celery_status()
    demo_websocket_notifications()
    demo_backup_restore()
    demo_docker_services()
    demo_ci_cd()
    
    print("\n" + "=" * 60)
    print("üéâ D√©monstration termin√©e!")
    print("\nüì∏ CAPTURES D'√âCRAN √Ä PRENDRE:")
    print("1. Tableau de bord admin avec notifications temps r√©el")
    print("2. Statut des t√¢ches Celery (ping, active, scheduled)")
    print("3. Health checks (/health/ready/ et /health/detailed/)")
    print("4. Logs des services Docker")
    print("5. Pipeline CI/CD en action")
    
    print("\nüìã CHECKLIST DE VALIDATION:")
    print("‚úÖ Health checks fonctionnels")
    print("‚úÖ Celery worker et beat op√©rationnels")
    print("‚úÖ WebSockets avec notifications temps r√©el")
    print("‚úÖ Sauvegardes et restauration")
    print("‚úÖ Services Docker avec health checks")
    print("‚úÖ Pipeline CI/CD configur√©")
    print("‚úÖ Documentation compl√®te (README, RUNBOOK)")

if __name__ == "__main__":
    main()

